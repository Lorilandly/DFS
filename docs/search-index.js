var searchIndex = new Map(JSON.parse('[\
["naming",{"doc":"The naming service is responsible for storing the …","t":"CCHCCCFNNNOONNNNNNNNNHHCCCFPPINNNNNNONNNNNNNNNNNNONNNNNFONNNONNNNNNONNNONNNNFNNONONNNNNNNNNNNONNNNPPIHHHCCCCCCCCCHHCFFNNNNHNNNNNNNONONNNNNNNNFFNNNNHNNNNNNNONONNNNNNNNFFNNNNHNNNNNNNONONNNNNNNNFFNNNNNNNNNHNNONOONNNNNNNNFFNNNNNNNNNNNHONONNNNNNNNFFNNNNNNNNNNNHONONNNNNNNNFFNNNNNONNNNNNHONNNNNNNNNFNNNONNNHONNNNFFNNNNOONOONNNNNNHNONNNNNNNNFNNNONNNONNNHN","n":["exception_return","logging","main","models","requests","routes","ExceptionReturn","borrow","borrow_mut","deserialize","exception_info","exception_type","fmt","from","into","new","serialize","try_from","try_into","type_id","vzip","buffer_and_print","print_request_response","dfs","fs_node","storage","Dfs","Err","Ok","Result","borrow","borrow_mut","default","delete","fmt","from","fs","get_ancestors","get_node","get_storage","insert","insert_files","insert_recursive","into","is_dir","is_valid_path","list","lock","random_storage","storage","try_from","try_into","type_id","unlock","vzip","FsNode","access_count","add_storage","borrow","borrow_mut","children","default","dereplicate_storage","fmt","from","get_storage","into","is_dir","new","remove_storage","replicate_storage","storages","try_from","try_into","type_id","vzip","Storage","borrow","borrow_mut","client_port","cmp","command_port","compare","default","eq","equivalent","equivalent","equivalent","fmt","from","hash","into","partial_cmp","storage_ip","try_from","try_into","type_id","vzip","Err","Ok","Result","storage_copy","storage_create","storage_delete","create_directory","create_file","delete","get_storage","is_directory","is_valid_path","list","lock","register","registration_routes","service_routes","unlock","CreateDirRequest","CreateDirResponse","borrow","borrow","borrow_mut","borrow_mut","create_dir","deserialize","fmt","fmt","from","from","into","into","path","serialize","success","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CreateFileRequest","CreateFileResponse","borrow","borrow","borrow_mut","borrow_mut","create_file","deserialize","fmt","fmt","from","from","into","into","path","serialize","success","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","DeleteRequest","DeleteResponse","borrow","borrow","borrow_mut","borrow_mut","delete","deserialize","fmt","fmt","from","from","into","into","path","serialize","success","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","GetStorageRequest","GetStorageResponse","borrow","borrow","borrow_mut","borrow_mut","deserialize","fmt","fmt","from","from","get_storage","into","into","path","serialize","server_ip","server_port","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","IsDirRequest","IsDirResponse","borrow","borrow","borrow_mut","borrow_mut","deserialize","fmt","fmt","from","from","into","into","is_directory","path","serialize","success","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","IsValidPathRequest","IsValidPathResponse","borrow","borrow","borrow_mut","borrow_mut","deserialize","fmt","fmt","from","from","into","into","is_valid_path","path","serialize","success","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ListRequest","ListResponse","borrow","borrow","borrow_mut","borrow_mut","deserialize","files","fmt","fmt","from","from","into","into","list","path","serialize","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","LockRequest","borrow","borrow_mut","deserialize","exclusive","fmt","from","into","lock","path","try_from","try_into","type_id","vzip","RegisterRequest","RegisterResponse","borrow","borrow","borrow_mut","borrow_mut","client_port","command_port","deserialize","files","files","fmt","fmt","from","from","into","into","register","serialize","storage_ip","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","UnlockRequest","borrow","borrow_mut","deserialize","exclusive","fmt","from","into","path","try_from","try_into","type_id","unlock","vzip"],"q":[[0,"naming"],[6,"naming::exception_return"],[21,"naming::logging"],[23,"naming::models"],[26,"naming::models::dfs"],[55,"naming::models::fs_node"],[76,"naming::models::storage"],[98,"naming::requests"],[104,"naming::routes"],[116,"naming::routes::create_directory"],[141,"naming::routes::create_file"],[166,"naming::routes::delete"],[191,"naming::routes::get_storage"],[217,"naming::routes::is_directory"],[242,"naming::routes::is_valid_path"],[267,"naming::routes::list"],[292,"naming::routes::lock"],[306,"naming::routes::register"],[334,"naming::routes::unlock"],[348,"core::error"],[349,"alloc::boxed"],[350,"core::result"],[351,"serde::de"],[352,"core::fmt"],[353,"core::fmt"],[354,"core::any"],[355,"bytes::bytes"],[356,"http::status"],[357,"alloc::string"],[358,"http_body"],[359,"axum_core::extract"],[360,"axum::middleware::from_fn"],[361,"axum_core::response::into_response"],[362,"std::path"],[363,"axum::json"],[364,"std::path"],[365,"alloc::sync"],[366,"core::option"],[367,"std::collections::hash::set"],[368,"alloc::collections::btree::set"],[369,"core::cmp"],[370,"core::hash"],[371,"tokio::sync::rwlock"],[372,"axum::routing"],[373,"axum::extract::state"],[374,"axum_core::response"]],"d":["Exception Interface.","Logging Module.","","Data Structures and Algorithms Module.","Requests to the storage servers.","Routes for the naming service.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Top level shared state.","File system node model","Storage server model","","Contains the error value","Contains the success value","","","","","Deletes a file or directory at the given path.","","Returns the argument unchanged.","A map of file system nodes.","Retrieves the ancestors of a given path.","Retrieves the node at the given path.","Retrieves the storage associated with a file at the given …","Inserts a file or directory at the given path.","Inserts multiple files or directories at the given paths.","","Calls <code>U::from(self)</code>.","Checks if the given path is a directory.","Checks if the given path is valid.","Lists the contents of a directory at the given path.","Locks a file or directory at the given path.","Retrieves a random storage from the available storages.","A set of available storage servers.","","","","Unlocks a file or directory at the given path.","","","access_count is the number of times the node is accessed …","Add a new storage to the node","","","When the node is a directory, children is a set of file …","","Remove all storage except for one","","Returns the argument unchanged.","Get a storage from the node","Calls <code>U::from(self)</code>.","","Creates a new FsNode object","Remove one storage at a time from the node","Replicate to a new storage for the node","storages is a set of storage servers that the node is …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Contains the error value","Contains the success value","","Tell storage server to copy file from another storage …","Create new file on storage server.","Delete file on storage server.","","","","","","","","","","Routes facing the registration port.","Routes facing the service port.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,57,57,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,58,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,40,38,40,0,38,38,40,38,40,38,40,38,40,40,38,40,38,40,38,40,38,40,0,0,41,42,41,42,0,41,41,42,41,42,41,42,41,42,42,41,42,41,42,41,42,41,42,0,0,43,44,43,44,0,43,43,44,43,44,43,44,43,44,44,43,44,43,44,43,44,43,44,0,0,45,46,45,46,45,45,46,45,46,0,45,46,45,46,46,46,45,46,45,46,45,46,45,46,0,0,47,48,47,48,47,47,48,47,48,47,48,0,47,48,48,47,48,47,48,47,48,47,48,0,0,49,50,49,50,49,49,50,49,50,49,50,0,49,50,50,49,50,49,50,49,50,49,50,0,0,51,52,51,52,51,52,51,52,51,52,51,52,0,51,52,51,52,51,52,51,52,51,52,0,53,53,53,53,53,53,53,0,53,53,53,53,53,0,0,54,55,54,55,54,54,54,54,55,54,55,54,55,54,55,0,55,54,54,55,54,55,54,55,54,55,0,56,56,56,56,56,56,56,56,56,56,56,0,56],"f":"``{{}{{h{b{f{d}}}}}}````{ce{}{}}0{c{{h{j}}}l}``{{jn}A`}{cc{}}3{{AbAb}j}{{jc}hAd}{c{{h{e}}}{}{}}0{cAf{}}7{{Abc}{{h{Ah{An{AjAl}}}}}{{Bb{}{{B`{Ah}}}}}}{{BdBf}{{h{{`{Bh}}{An{AjAl}}}}}}```````99{{}Bj}{{BjBl}{{h{Bn{An{Aj{C`{j}}}}}}}}{{Bjn}A`}9`{Bl{{Cd{Cb}}}}{{BjBl}{{h{Cf{An{Aj{C`{j}}}}}}}}{{BjBl}{{h{{Cj{Ch}}{An{Aj{C`{j}}}}}}}}{{BjBlBn}{{h{Bn{An{Aj{C`{j}}}}}}}}{{Bj{Cd{Cb}}{Cj{Ch}}}{{Cd{Cb}}}}{{BjBlBn{Cj{Ch}}}Bn}{ce{}{}}8{BlBn}{{BjBl}{{h{{Cd{Al}}{An{Aj{C`{j}}}}}}}}{{BjBlBn}{{h{b{An{Aj{C`{j}}}}}}}}{Bj{{h{{Cj{Ch}}{An{Aj{C`{j}}}}}}}}`{c{{h{e}}}{}{}}0{cAf{}}36``{{Cf{Cj{Ch}}}b}77`{{}Cf}{{CfBl}b}{{Cfn}A`}{cc{}}{Cf{{Cl{{Cj{Ch}}}}}}<`{{Bn{Cn{Al}}{Cj{Ch}}}Cf}4{{Cf{D`{{Cj{Ch}}}}Bl}b}`998>`>>`{{ChCh}Db}`{{ce}Db{}{}}{{}Ch}{{ChCh}Bn}{{ce}Bn{}{}}00{{Chn}A`}9{{Chc}bDd}{ce{}{}}{{ChCh}{{Cl{Db}}}}`{c{{h{e}}}{}{}}0{cAf{}}3```{{ChChBl}{{h{Bn{An{Aj{C`{j}}}}}}}}{{ChBl}{{h{Bn{An{Aj{C`{j}}}}}}}}0`````````{{{Cj{{Df{Bj}}}}}Dh}0```6666{{{Dj{{Cj{{Df{Bj}}}}}}{C`{Dl}}}{{Dn{{`{Bh}}}}}}{c{{h{Dl}}}l}{{Dln}A`}{{E`n}A`}{cc{}}0;;`{{E`c}hAd}`::::99<<``<<<<{{{Dj{{Cj{{Df{Bj}}}}}}{C`{Eb}}}{{Dn{{`{Bh}}}}}}{c{{h{Eb}}}l}{{Ebn}A`}{{Edn}A`}55{ce{}{}}0`{{Edc}hAd}`{c{{h{e}}}{}{}}000{cAf{}}033``3333{{{Dj{{Cj{{Df{Bj}}}}}}{C`{Ef}}}{{Dn{{`{Bh}}}}}}{c{{h{Ef}}}l}{{Efn}A`}{{Ehn}A`}==77`{{Ehc}hAd}`66665588``8888{c{{h{Ej}}}l}{{Ejn}A`}{{Eln}A`}{cc{}}0{{{Dj{{Cj{{Df{Bj}}}}}}{C`{Ej}}}{{Dn{{`{Bh}}}}}}==`{{Elc}hAd}``<<<<;;>>``>>>>{c{{h{En}}}l}{{Enn}A`}{{F`n}A`}55{ce{}{}}0{{{Dj{{Cj{{Df{Bj}}}}}}{C`{En}}}{{Dn{{`{Bh}}}}}}`{{F`c}hAd}`{c{{h{e}}}{}{}}000{cAf{}}044``4444{c{{h{Fb}}}l}{{Fbn}A`}{{Fdn}A`}==77{{{C`{Fb}}}{{`{Bh}}}}`{{Fdc}hAd}`66665599``9999{c{{h{Ff}}}l}`{{Ffn}A`}{{Fhn}A`}{cc{}}0=={{{Dj{{Cj{{Df{Bj}}}}}}{C`{Ff}}}{{Dn{{`{Bh}}}}}}`{{Fhc}hAd}<<<<;;??`??{c{{h{Fj}}}l}`{{Fjn}A`}4{ce{}{}}{{{Dj{{Cj{{Df{Bj}}}}}}{C`{Fj}}}{{Dn{{`{Bh}}}}}}`{c{{h{e}}}{}{}}0{cAf{}}3``3333``{c{{h{Fl}}}l}``{{Fln}A`}{{Fnn}A`};;66{{{Dj{{Cj{{Df{Bj}}}}}}{C`{Fl}}}{{`{Bh}}}}{{Fnc}hAd}`66665588`88{c{{h{G`}}}l}`{{G`n}A`}?:`887{{{Dj{{Cj{{Df{Bj}}}}}}{C`{G`}}}{{Dn{{`{Bh}}}}}};","c":[],"p":[[1,"unit"],[10,"Error",348],[5,"Box",349],[6,"Result",350],[5,"ExceptionReturn",6],[10,"Deserializer",351],[5,"Formatter",352],[8,"Result",352],[1,"str"],[10,"Serializer",353],[5,"TypeId",354],[5,"Bytes",355],[5,"StatusCode",356],[5,"String",357],[1,"tuple"],[17,"Data"],[10,"Body",358],[8,"Request",359],[5,"Next",360],[10,"IntoResponse",361],[5,"Dfs",26],[5,"Path",362],[1,"bool"],[5,"Json",363],[5,"PathBuf",362],[5,"Vec",364],[5,"FsNode",55],[5,"Storage",76],[5,"Arc",365],[6,"Option",366],[5,"HashSet",367],[5,"BTreeSet",368],[6,"Ordering",369],[10,"Hasher",370],[5,"RwLock",371],[5,"Router",372],[5,"State",373],[5,"CreateDirRequest",116],[8,"Result",374],[5,"CreateDirResponse",116],[5,"CreateFileRequest",141],[5,"CreateFileResponse",141],[5,"DeleteRequest",166],[5,"DeleteResponse",166],[5,"GetStorageRequest",191],[5,"GetStorageResponse",191],[5,"IsDirRequest",217],[5,"IsDirResponse",217],[5,"IsValidPathRequest",242],[5,"IsValidPathResponse",242],[5,"ListRequest",267],[5,"ListResponse",267],[5,"LockRequest",292],[5,"RegisterRequest",306],[5,"RegisterResponse",306],[5,"UnlockRequest",334],[8,"Result",26],[8,"Result",98]],"b":[]}],\
["storage",{"doc":"Storage service","t":"CCHCCCCCCCCCCFNNNOONNNNNNNNFFNNNNNNNNNNNONOOHONNNNNNFFNNNNNNNNNNNONHONNNNNNFFNNNNNNNNNNNONHONNNNNNFFNNNNONNNNNNNNOOONNHNNNNNNFFNNNNNNNNNNNNONNOHNNNNNNFFCNNNNONNNNNNOONHONNNNNNHHHHHHHPPFFIFNNNNNNOONNNNNNOONNNNNNNNNNNNNNNNNONNONNNNNNNNNN","n":["handlers","logging","main","requests","routes","storage","exception_return","storage_copy","storage_create","storage_delete","storage_read","storage_size","storage_write","ExceptionReturn","borrow","borrow_mut","deserialize","exception_info","exception_type","fmt","from","into","new","serialize","try_from","try_into","type_id","StorageCopyRequest","StorageCopyResponse","borrow","borrow","borrow_mut","borrow_mut","deserialize","fmt","fmt","from","from","into","into","path","serialize","server_ip","server_port","storage_copy","success","try_from","try_from","try_into","try_into","type_id","type_id","StorageCreateRequest","StorageCreateResponse","borrow","borrow","borrow_mut","borrow_mut","deserialize","fmt","fmt","from","from","into","into","path","serialize","storage_create","success","try_from","try_from","try_into","try_into","type_id","type_id","StorageDeleteRequest","StorageDeleteResponse","borrow","borrow","borrow_mut","borrow_mut","deserialize","fmt","fmt","from","from","into","into","path","serialize","storage_delete","success","try_from","try_from","try_into","try_into","type_id","type_id","StorageReadRequest","StorageReadResponse","borrow","borrow","borrow_mut","borrow_mut","data","deserialize","deserialize","fmt","fmt","from","from","into","into","length","offset","path","serialize","serialize","storage_read","try_from","try_from","try_into","try_into","type_id","type_id","StorageSizeRequest","StorageSizeResponse","borrow","borrow","borrow_mut","borrow_mut","deserialize","deserialize","fmt","fmt","from","from","into","into","path","serialize","serialize","size","storage_size","try_from","try_from","try_into","try_into","type_id","type_id","StorageWriteRequest","StorageWriteResponse","base64","borrow","borrow","borrow_mut","borrow_mut","data","deserialize","fmt","from","from","into","into","offset","path","serialize","storage_write","success","try_from","try_from","try_into","try_into","type_id","type_id","deserialize","buffer_and_print","print_request_response","get_file_size","read_file","client_routes","command_routes","Err","Ok","RegisterRequest","RegisterResponse","Result","Storage","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","client_port","command_port","copy","create_file","create_file_ignore_exist","delete_file","deserialize","deserialize","files","files","find_file","fmt","from","from","from","get_all_files_recursive","get_file_size","get_full_path","initialize_storage","into","into","into","is_dir_empty","is_valid_path","new","read","remove_dir_recursive","root_storage_dir","serialize","serialize","storage_ip","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write"],"q":[[0,"storage"],[6,"storage::handlers"],[13,"storage::handlers::exception_return"],[27,"storage::handlers::storage_copy"],[52,"storage::handlers::storage_create"],[75,"storage::handlers::storage_delete"],[98,"storage::handlers::storage_read"],[125,"storage::handlers::storage_size"],[150,"storage::handlers::storage_write"],[175,"storage::handlers::storage_write::base64"],[176,"storage::logging"],[178,"storage::requests"],[180,"storage::routes"],[182,"storage::storage"],[235,"core::error"],[236,"alloc::boxed"],[237,"core::result"],[238,"serde::de"],[239,"core::fmt"],[240,"core::fmt"],[241,"core::any"],[242,"tokio::sync::mutex"],[243,"alloc::sync"],[244,"axum::extract::state"],[245,"axum::json"],[246,"axum_core::response::into_response"],[247,"axum_core::response"],[248,"alloc::vec"],[249,"bytes::bytes"],[250,"http::status"],[251,"alloc::string"],[252,"http_body"],[253,"axum_core::extract"],[254,"axum::middleware::from_fn"],[255,"std::path"],[256,"reqwest::error"],[257,"axum::routing"],[258,"std::path"],[259,"std::io::error"]],"d":["Handlers for the storage service.","Logging middleware for Axum.","","This module contains functions that send requests to the …","Routes for the storage service.","This module contains the implementation of the storage …","This module contains the struct for the exception return.","Copy a file from one storage server to local.","Create a file in the storage.","Delete a file from the storage.","Read data from a file in the storage","Get the size of a file in the storage.","Write data to a file in the storage.","Represents the response payload for an exception.","","","","The information of the exception.","The type of the exception.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Represents the request payload for the storage copy …","Represents the response payload for the storage copy …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Handles the storage copy.","Indicates whether file copy was successful.","","","","","","","Represents the request payload for creating a file in the …","Represents the response payload for creating a file in the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Handler function for creating a file in the storage.","","","","","","","","Represents the request payload for deleting a file from …","Represents the response payload for deleting a file from …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The path of the file to delete.","","Handler function for deleting a file from the storage.","Indicates whether file deletion was successful.","","","","","","","Represents the request payload for reading data from a …","Represents the response payload for reading data from a …","","","","","The data read from the file.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The length of data to read.","The offset from which to start reading.","The path of the file to read.","","","Handler function for reading data from a file in the …","","","","","","","Represents the request payload for getting the size of a …","Represents the response payload for getting the size of a …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The path of the file to get the size of.","","","The size of the file in bytes.","Handler function for getting the size of a file in the …","","","","","","","","Represents the response payload for writing data to a file …","Deserializes base64-encoded data.","","","","","The data to write.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The offset in the file to write to.","The path of the file to write to.","","Handler function for writing data to a file in the storage.","Indicates whether the write operation was successful.","","","","","","","Deserializes base64-encoded data.","","","Sends a request to the storage service to get the size of …","Sends a request to the storage service to read a file.","a router with the storage service routes.","a router with the storage service routes.","Contains the error value","Contains the success value","Represents the request payload for the storage register …","Represents the response payload for the storage register …","The result type for the storage server","Storage struct","","","","","","","The port number of the client server","The port number of the command server","Copy a file from another storage server with the given …","Create a file with the given path","Create a file with the given path if it does not exist, if …","Delete a file with the given path","","","The list of files in the storage server","The list of files to delete","Find a file with the given path","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get all files in the storage directory recursively","Get the size of a file with the given path","Get the full path of a file with the given path","Initialize the storage server by registering with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if a directory is empty","Check if a path is valid","","Read data from a file with the given path, offset, and …","Remove a directory if it is empty and recursively remove …","the root directory of the storage server","","","The IP address of the storage server","","","","","","","","","","Write data to a file with the given path, offset, and data"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,12,13,12,13,12,12,13,12,13,12,13,12,13,12,12,0,13,12,13,12,13,12,13,0,0,21,22,21,22,21,21,22,21,22,21,22,21,22,0,22,21,22,21,22,21,22,0,0,23,24,23,24,23,23,24,23,24,23,24,23,24,0,24,23,24,23,24,23,24,0,0,25,26,25,26,26,25,26,25,26,25,26,25,26,25,25,25,25,26,0,25,26,25,26,25,26,0,0,27,28,27,28,27,28,27,28,27,28,27,28,27,27,28,28,0,27,28,27,28,27,28,0,0,0,29,30,29,30,29,29,29,29,30,29,30,29,29,30,0,30,29,30,29,30,29,30,0,0,0,0,0,0,0,54,54,0,0,0,0,14,49,50,14,49,50,49,49,14,14,14,14,49,50,49,50,14,50,14,49,50,14,14,14,14,14,49,50,14,14,14,14,14,14,49,50,49,14,49,50,14,49,50,14,49,50,14],"f":"``{{}{{h{b{f{d}}}}}}```````````{ce{}{}}0{c{{h{j}}}l}``{{jn}A`}{cc{}}3{{AbAb}j}{{jc}hAd}{c{{h{e}}}{}{}}0{cAf{}}``7777{c{{h{Ah}}}l}{{Ahn}A`}{{Ajn}A`}77::`{{Ajc}hAd}``{{{Bb{{B`{{An{Al}}}}}}{Bd{Ah}}}{{Bh{{`{Bf}}}}}}`666655``<<<<{c{{h{Bj}}}l}{{Bjn}A`}{{Bln}A`}<<??`{{Blc}hAd}{{{Bb{{B`{{An{Al}}}}}}{Bd{Bj}}}{{Bh{{`{Bf}}}}}}`;;;;::``{ce{}{}}000{c{{h{Bn}}}l}{{Bnn}A`}{{C`n}A`}{cc{}}044`{{C`c}hAd}{{{Bb{{B`{{An{Al}}}}}}{Bd{Bn}}}{{Bh{{`{Bf}}}}}}`{c{{h{e}}}{}{}}000{cAf{}}0``8888`{c{{h{Cb}}}l}{c{{h{Cd}}}l}{{Cbn}A`}{{Cdn}A`}88<<```{{Cbc}hAd}{{Cdc}hAd}{{{Bb{{B`{{An{Al}}}}}}{Bd{Cb}}}{{`{Bf}}}}888877``????{c{{h{Cf}}}l}{c{{h{Ch}}}l}{{Cfn}A`}{{Chn}A`}??{ce{}{}}0`{{Cfc}hAd}{{Chc}hAd}`{{{Bb{{B`{{An{Al}}}}}}{Bd{Cf}}}{{Bh{{`{Bf}}}}}}{c{{h{e}}}{}{}}000{cAf{}}0```5555`{c{{h{Cj}}}l}{{Cjn}A`}{cc{}}088``{{Clc}hAd}{{{Bb{{B`{{An{Al}}}}}}{Bd{Cj}}}{{Bh{{`{Bf}}}}}}`666655{c{{h{{D`{Cn}}}}}l}{{Abc}{{h{Db{Dh{DdDf}}}}}{{Dl{}{{Dj{Db}}}}}}{{DnE`}{{h{{`{Bf}}{Dh{DdDf}}}}}}{{EbDfEd}{{h{Chj}}}}{{CbDfEd}{{h{CdEf}}}}{{{B`{{An{Al}}}}}Eh}0``````{ce{}{}}00000``{{AlEjAbEl}{{h{En{Dh{Dd{Bd{j}}}}}}}}{{AlEj}{{h{En{Dh{Dd{Bd{j}}}}}}}}{{AlEj}{{h{F`{Dh{Dd{Bd{j}}}}}}}}1{c{{h{Fb}}}l}{c{{h{Fd}}}l}``2{{Fdn}A`}???{{AlEj}{{h{{D`{Eb}}Ff}}}}{{AlEj}{{h{Fh{Dh{Dd{Bd{j}}}}}}}}{{AlEj}{{h{Eb{Dh{Dd{Bd{j}}}}}}}}{{AlElElElEj}{{h{b{f{d}}}}}}:::{{AlEj}{{h{EnFf}}}}{EjEn}{EjAl}{{AlEjFhFh}{{h{{D`{Cn}}{Dh{Dd{Bd{j}}}}}}}}{{AlEj}{{h{bFf}}}}`{{Fbc}hAd}{{Fdc}hAd}`{c{{h{e}}}{}{}}00000{cAf{}}00{{AlEjFj{D`{Cn}}}{{h{b{Dh{Dd{Bd{j}}}}}}}}","c":[],"p":[[1,"unit"],[10,"Error",235],[5,"Box",236],[6,"Result",237],[5,"ExceptionReturn",13],[10,"Deserializer",238],[5,"Formatter",239],[8,"Result",239],[1,"str"],[10,"Serializer",240],[5,"TypeId",241],[5,"StorageCopyRequest",27],[5,"StorageCopyResponse",27],[5,"Storage",182],[5,"Mutex",242],[5,"Arc",243],[5,"State",244],[5,"Json",245],[10,"IntoResponse",246],[8,"Result",247],[5,"StorageCreateRequest",52],[5,"StorageCreateResponse",52],[5,"StorageDeleteRequest",75],[5,"StorageDeleteResponse",75],[5,"StorageReadRequest",98],[5,"StorageReadResponse",98],[5,"StorageSizeRequest",125],[5,"StorageSizeResponse",125],[5,"StorageWriteRequest",150],[5,"StorageWriteResponse",150],[1,"u8"],[5,"Vec",248],[5,"Bytes",249],[5,"StatusCode",250],[5,"String",251],[1,"tuple"],[17,"Data"],[10,"Body",252],[8,"Request",253],[5,"Next",254],[5,"PathBuf",255],[1,"i16"],[5,"Error",256],[5,"Router",257],[5,"Path",255],[1,"u16"],[1,"bool"],[5,"File",258],[5,"RegisterRequest",182],[5,"RegisterResponse",182],[5,"Error",259],[1,"u64"],[1,"i64"],[8,"Result",182]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
